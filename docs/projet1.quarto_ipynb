{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: Projet 1\n",
        "---\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "Ci-dessous, quelques éléments d'analyse des données.\n",
        "\n",
        "<iframe src=\"./images/graphique_distance_jour.html\" width=\"100%\" height=\"600\"></iframe>\n",
        "\n",
        "Le graphique ci-dessus montre [...]\n"
      ],
      "id": "0e945eb4"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# Map lié à la base de donnée.\n",
        "\n",
        "import osmnx as ox\n",
        "import folium\n",
        "import networkx as nx\n",
        "import pandas as pd\n",
        "from src.fonctions_basedonnees import*\n",
        "\n",
        "coordonne.cache_clear()\n",
        "\n",
        "# Ville ciblée pour extraire les données du réseau de routes cyclables\n",
        "ville = \"Montpellier, France\"\n",
        "G = ox.graph_from_place(ville, network_type=\"all\")\n",
        "# Créer une carte globale centrée sur Montpellier\n",
        "m = folium.Map(location=[43.6114, 3.8767], zoom_start=13)  # Coordonnées du centre Montpellier\n",
        "\n",
        "#Extraire notre dataframe\n",
        "df_coursesvelomagg_traité = pd.read_csv(\"C:/Users/Fabian/HAX712X/PROJ_HAX712X/data/CoursesVelomagg.csv\").dropna()\n",
        "\n",
        "# Extraire les trajets avec les noms des stations aller et le nom des stations retours\n",
        "liste_des_trajets = df_coursesvelomagg_traité[['Departure','Departure station', 'Return station','Covered distance (m)', 'Duration (sec.)']]\n",
        "\n",
        "#Convertir + nettoyer les colonnes\n",
        "#Convertie les donnée date en datetime pour que la machine puisse comprendre les dates\n",
        "liste_des_trajet_DBF =liste_des_trajets #pd_to_datetime(df_coursesvelomagg_traité, 'Departure')\n",
        "#Nettoie le dataframe des mauvais caractère qui bruitent l'analyse\n",
        "liste_des_trajet_DBF['Departure station'] = liste_des_trajet_DBF['Departure station'].apply(nettoyer_adresse_normalise)\n",
        "liste_des_trajet_DBF['Return station'] = liste_des_trajet_DBF['Return station'].apply(nettoyer_adresse_normalise)\n",
        "\n",
        "# Traite un cas particulier.\n",
        "# Remplacer les valeurs dans les colonnes 'Departure station' et 'Return station'\n",
        "liste_des_trajet_DBF['Departure station'] = liste_des_trajet_DBF['Departure station'].replace(\"FacdesSciences\", \"Faculté des sciences\")\n",
        "liste_des_trajet_DBF['Return station'] = liste_des_trajet_DBF['Return station'].replace(\"FacdesSciences\", \"Faculté des sciences\")\n",
        "# Remplacer toutes les occurrences se terminant par \"Gare Saint-Roch\" par \"Gare Saint-Roch\"\n",
        "liste_des_trajet_DBF['Departure station'] = liste_des_trajet_DBF['Departure station'].replace(\n",
        "    r\".*Gare Saint-Roch$\", \"Gare Saint-Roch\", regex=True\n",
        ")\n",
        "liste_des_trajet_DBF['Return station'] = liste_des_trajet_DBF['Return station'].replace(\n",
        "    r\".*Gare Saint-Roch$\", \"Gare Saint-Roch\", regex=True\n",
        ")\n",
        "\n",
        "\n",
        "Liste_des_dates = liste_des_trajet_DBF['Departure'].str[:10].unique()\n",
        "print(Liste_des_dates)\n",
        "\n",
        "# Interaction avec l'utilisateur\n",
        "date = input(\"Veuillez choisir une date parmi la liste des dates (AAAA-MM-JJ) : \")\n",
        "\n",
        "# Sélectionner les trajets du jour\n",
        "trajets_du_jour = liste_des_trajet_DBF[liste_des_trajet_DBF['Departure'].str.startswith(date)]\n",
        "trajets_du_jour = trajets_du_jour.reset_index(drop=True) #Evite les erreurs pour les index\n",
        "\n",
        "nb_ref = len(trajets_du_jour)\n",
        "print(f\"Nous avons {nb_ref} référence(s) à cette date.\")\n",
        "\n",
        "# Demander si l'utilisateur souhaite tracer les trajets\n",
        "a = input(\"Voulez-vous les tracer (oui/non) ? \")\n",
        "if a.lower() == \"oui\":\n",
        "    # Demander combien de trajets afficher\n",
        "    min_trajets = int(input(\"Combien de trajets voulez-vous afficher sur votre journée ? \"))\n",
        "    \n",
        "    # Boucle pour afficher les trajets (limité au nombre de trajets disponibles)\n",
        "    for i in range(min(min_trajets, nb_ref)): \n",
        "        print(f\"Affichage du trajet {i+1}\")\n",
        "        if trajets_du_jour.loc[i, 'Covered distance (m)']<2000 :\n",
        "            gen_carte_trajet(trajets_du_jour.iloc[i], G, m, 1, 2,'green')  # Ajout de la carte de chaque trajet à la carte globale\n",
        "        elif 2000<trajets_du_jour.loc[i, 'Covered distance (m)']<4000 :\n",
        "            gen_carte_trajet(trajets_du_jour.iloc[i], G, m, 1, 2, 'blue')  # Ajout de la carte de chaque trajet à la carte globale\n",
        "        else:\n",
        "             gen_carte_trajet(trajets_du_jour.iloc[i], G, m, 1, 2, 'red')  # Ajout de la carte de chaque trajet à la carte globale\n",
        "\n",
        "# Créer une légende en HTML pour indiquer la signification des couleurs\n",
        "legend_html = \"\"\"\n",
        "<div style=\"\n",
        "    position: fixed;\n",
        "    bottom: 50px;\n",
        "    left: 50px;\n",
        "    width: 200px;\n",
        "    height: 120px;\n",
        "    background-color: white;\n",
        "    border:2px solid grey;\n",
        "    z-index:9999;\n",
        "    font-size:14px;\n",
        "    padding: 10px;\n",
        "    \">\n",
        "    <b>Légende des distances</b> <br>\n",
        "    <i style=\"background:green; width: 10px; height: 10px; float: left; margin-right: 10px;\"></i> Moins de 2000 m<br>\n",
        "    <i style=\"background:blue; width: 10px; height: 10px; float: left; margin-right: 10px;\"></i> Entre 2000 et 4000 m<br>\n",
        "    <i style=\"background:red; width: 10px; height: 10px; float: left; margin-right: 10px;\"></i> Plus de 4000 m<br>\n",
        "</div>\n",
        "\"\"\"\n",
        "\n",
        "# Ajouter la légende HTML à la carte\n",
        "m.get_root().html.add_child(folium.Element(legend_html))\n",
        "\n",
        "\n",
        "\n",
        "# Sauvegarder la carte dans un fichier HTML\n",
        "m.save(\"C:/Users/Fabian/HAX712X/PROJ_HAX712X/visualisation/carte_montpellier_trajet_via_BD.html\")\n",
        "\n",
        "# Afficher un message pour indiquer que la carte est prête\n",
        "print(\"La carte a été sauvegardée sous './visualisation/carte_montpellier_trajet_via_BD.html'.\")\n",
        "\n",
        "data = trajets_du_jour[['Departure', 'Departure station', 'Return station', 'Covered distance (m)', 'Duration (sec.)']]\n",
        "data.to_csv('C:/Users/Fabian/HAX712X/PROJ_HAX712X/data/video.csv', index=False)"
      ],
      "id": "6bea0dc8",
      "execution_count": null,
      "outputs": []
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python3",
      "language": "python",
      "display_name": "Python 3 (ipykernel)",
      "path": "C:\\Users\\Fabian\\anaconda3\\envs\\creation_cartes\\share\\jupyter\\kernels\\python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}