[
  {
    "objectID": "projet3.html",
    "href": "projet3.html",
    "title": "Projet 3",
    "section": "",
    "text": "Et là, la vidéo que nous avons produit."
  },
  {
    "objectID": "projet1.html",
    "href": "projet1.html",
    "title": "Projet 1",
    "section": "",
    "text": "Ci-dessous, quelques éléments d’analyse des données. \n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLe graphique ci-dessus montre […]"
  },
  {
    "objectID": "docu.html",
    "href": "docu.html",
    "title": "Documentation",
    "section": "",
    "text": "Le projet CycleVision3 a pour objectif d’analyser et de prédire les flux cyclistes dans la ville de Montpellier à l’aide de données issues de trois sources principales :\n\nVéloMagg : Historique des trajets réalisés avec le système de vélos en libre-service.\n\nCapteurs de flux cyclistes et piétons : Données collectées à partir de dispositifs installés aux points stratégiques de la ville.\n\nOpenStreetMap (OSM) : Données géographiques ouvertes, utilisées pour la cartographie et la contextualisation des trajets.\n\nL’ambition du projet est de développer des visualisations interactives, notamment une carte prédictive des flux cyclistes, accessibles via un site web dédié. Ces outils visent à :\n- Identifier les tendances de mobilité pour mieux comprendre les habitudes des usagers.\n- Proposer des solutions pratiques afin d’optimiser les infrastructures urbaines et de promouvoir l’usage du vélo comme moyen de transport durable.\nEn combinant innovation technologique et impact sociétal, CycleVision3 s’inscrit dans une démarche adaptable à d’autres contextes urbains. Ce projet contribue ainsi à la réflexion autour de la mobilité intelligente et durable, répondant aux enjeux croissants des villes contemporaines."
  },
  {
    "objectID": "docu.html#data-cleaning-and-preprocessing",
    "href": "docu.html#data-cleaning-and-preprocessing",
    "title": "Documentation",
    "section": "4.1 Data Cleaning and Preprocessing",
    "text": "4.1 Data Cleaning and Preprocessing\n\nTasks:\n\nData Integrity: Clean the data by removing anomalies, handling missing values, and ensuring consistent formatting.\nDate and Address Formatting: Convert date fields for temporal analysis and standardize address formatting to enable efficient location-based processing."
  },
  {
    "objectID": "docu.html#traffic-visualization-and-mapping",
    "href": "docu.html#traffic-visualization-and-mapping",
    "title": "Documentation",
    "section": "4.2 Traffic Visualization and Mapping",
    "text": "4.2 Traffic Visualization and Mapping\n\nTasks:\n\nMap Generation: Use the Folium library to generate an interactive map of Montpellier, displaying bike stations, routes, and traffic density.\nRoute Calculation: Utilize OSMnx to calculate the routes between bike stations, highlighting the most popular paths and enabling traffic analysis over time."
  },
  {
    "objectID": "docu.html#website-development",
    "href": "docu.html#website-development",
    "title": "Documentation",
    "section": "4.3 Website Development",
    "text": "4.3 Website Development\nThe final deliverable will be an interactive website, presenting all the data visualizations and analytical insights. The website will be developed using Quarto for easy integration of analysis and visualizations into an accessible, interactive interface."
  },
  {
    "objectID": "docu.html#additional-features",
    "href": "docu.html#additional-features",
    "title": "Documentation",
    "section": "6.1 Additional Features",
    "text": "6.1 Additional Features\n\nPollution and Traffic Correlation: Investigate correlations between bike traffic patterns and air quality metrics.\nReal-Time Traffic Analysis: Integrate live data feeds for real-time updates, route suggestions, and traffic monitoring.\nAlternative Routes: Offer optimized routes with lower traffic density, based on real-time or historical traffic data."
  },
  {
    "objectID": "auteurs.html",
    "href": "auteurs.html",
    "title": "Contributeurs",
    "section": "",
    "text": "Email\nGitHub Profile\n\n\n\n\n\nEmail\nGitHub Profile\n\n\n\n\n\nEmail\nGitHub Profile\n\n\n\n\n\nEmail\nGitHub Profile"
  },
  {
    "objectID": "auteurs.html#authors",
    "href": "auteurs.html#authors",
    "title": "Contributeurs",
    "section": "",
    "text": "ARMAND Charlotte\nMail\nGit\nCONDAMY Fabian\nMail\nGit\nSCAIA Matteo\nMail\nGit\nSTETSUN Kateryna\nMail\nGit"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Visualisation des trajets en vélo dans la ville de Montpellier.",
    "section": "",
    "text": "CycleVision3 est un projet qui vise à décrire le trafic cycliste à Montpellier à travers l’analyse des quelques jeux de données suivants :\n\nTrajets à vélos en libre-service\nComptages vélo et piéton issus des compteurs de vélo\nOpenStreetMap\n\nIl s’agit principalement d’un projet de visualisation, avec des cartes (dont certaines sont interactives) et une vidéo. Les principaux projets sont disponibles dans l’onglet éponyme."
  },
  {
    "objectID": "index.html#a-propos",
    "href": "index.html#a-propos",
    "title": "Visualisation des trajets en vélo dans la ville de Montpellier.",
    "section": "",
    "text": "CycleVision3 est un projet qui vise à décrire le trafic cycliste à Montpellier à travers l’analyse des quelques jeux de données suivants :\n\nTrajets à vélos en libre-service\nComptages vélo et piéton issus des compteurs de vélo\nOpenStreetMap\n\nIl s’agit principalement d’un projet de visualisation, avec des cartes (dont certaines sont interactives) et une vidéo. Les principaux projets sont disponibles dans l’onglet éponyme."
  },
  {
    "objectID": "index.html#stations-de-vélos-à-montpellier.",
    "href": "index.html#stations-de-vélos-à-montpellier.",
    "title": "Visualisation des trajets en vélo dans la ville de Montpellier.",
    "section": "Stations de vélos à Montpellier.",
    "text": "Stations de vélos à Montpellier."
  },
  {
    "objectID": "index.html#test-importation-fichier-html",
    "href": "index.html#test-importation-fichier-html",
    "title": "Visualisation des trajets en vélo dans la ville de Montpellier.",
    "section": "Test importation fichier HTML",
    "text": "Test importation fichier HTML"
  },
  {
    "objectID": "index.html#test-importation-fichier-python",
    "href": "index.html#test-importation-fichier-python",
    "title": "Visualisation des trajets en vélo dans la ville de Montpellier.",
    "section": "Test Importation fichier Python",
    "text": "Test Importation fichier Python\n\n\nNombre de trajets par jour:\n           Date  Nombre de trajets\n0    2023-12-01                241\n1    2023-12-02                331\n2    2023-12-03                262\n3    2023-12-04                175\n4    2023-12-05                272\n..          ...                ...\n241  2024-09-26                609\n242  2024-09-27                682\n243  2024-09-28                679\n244  2024-09-29                742\n245  2024-09-30                567\n\n[246 rows x 2 columns]\n\n\n\n\n\n\n\n\n\nIndex([23, 23, 23, 23, 23, 23, 23, 22, 22, 22,\n       ...\n        0,  0,  0,  0,  0,  0,  0,  0,  0,  0],\n      dtype='int32', name='Departure', length=126786)"
  },
  {
    "objectID": "index.html#contact",
    "href": "index.html#contact",
    "title": "Visualisation des trajets en vélo dans la ville de Montpellier.",
    "section": "Contact",
    "text": "Contact\nPour toute question ou suggestion, n’hésitez pas à nous contacter."
  },
  {
    "objectID": "projet2.html",
    "href": "projet2.html",
    "title": "Projet 2",
    "section": "",
    "text": "Ici, les cartes issues de nos principaux travaux.\n\n\nNombre de trajets par jour:\n           Date  Nombre de trajets\n0    2023-12-01                242\n1    2023-12-02                338\n2    2023-12-03                263\n3    2023-12-04                178\n4    2023-12-05                281\n..          ...                ...\n241  2024-09-26                612\n242  2024-09-27                684\n243  2024-09-28                681\n244  2024-09-29                743\n245  2024-09-30                583\n\n[246 rows x 2 columns]\n\n\n\n\n\n\n\n\n\nIndex([23, 23, 23, 23, 23, 23, 23, 22, 22, 22,\n       ...\n        0,  0,  0,  0,  0,  0,  0,  0,  0,  0],\n      dtype='int32', name='Departure', length=128504)\n\n\n                                                \n\n\nNombre de trajets par jour:\n           Date  Nombre de trajets\n0    2020-11-01                323\n1    2020-11-02                404\n2    2020-11-03                463\n3    2020-11-04                450\n4    2020-11-05                458\n..          ...                ...\n447  2022-01-27                813\n448  2022-01-28                864\n449  2022-01-29                844\n450  2022-01-30                973\n451  2022-01-31                643\n\n[452 rows x 2 columns]\n\n\n\n\n\n\n\n\n\nIndex([23, 23, 23, 23, 23, 22, 22, 22, 22, 22,\n       ...\n        1,  0,  0,  0,  0,  0,  0,  0,  0,  0],\n      dtype='int32', name='Departure', length=403320)\n\n\n                                                \n\n\nNombre de trajets par jour:\n           Date  Nombre de trajets\n0    2021-09-01               1227\n1    2021-09-02               1310\n2    2021-09-03                905\n3    2021-09-04               1390\n4    2021-09-05               1465\n..          ...                ...\n359  2022-12-27                310\n360  2022-12-28                226\n361  2022-12-29                283\n362  2022-12-30                300\n363  2022-12-31                317\n\n[364 rows x 2 columns]\n\n\n\n\n\n\n\n\n\nIndex([23, 23, 23, 23, 23, 23, 23, 23, 23, 22,\n       ...\n        0,  0,  0,  0,  0,  0,  0,  0,  0,  0],\n      dtype='int32', name='Departure', length=347157)\n\n\n                                                \n\n\nNombre de trajets par jour:\n           Date  Nombre de trajets\n0    2023-01-01                521\n1    2023-01-02                252\n2    2023-01-03                295\n3    2023-01-04                384\n4    2023-01-05                459\n..          ...                ...\n329  2023-11-26                371\n330  2023-11-27                304\n331  2023-11-28                311\n332  2023-11-29                325\n333  2023-11-30                361\n\n[334 rows x 2 columns]\n\n\n\n\n\n\n\n\n\nIndex([23, 23, 23, 23, 23, 23, 23, 23, 23, 23,\n       ...\n        0,  0,  0,  0,  0,  0,  0,  0,  0,  0],\n      dtype='int32', name='Departure', length=235544)\n\n\n                                                \n\n\nNombre de trajets par jour:\n           Date  Nombre de trajets\n0    2023-01-01                521\n1    2023-01-02                252\n2    2023-01-03                295\n3    2023-01-04                384\n4    2023-01-05                459\n..          ...                ...\n329  2023-11-26                371\n330  2023-11-27                304\n331  2023-11-28                311\n332  2023-11-29                325\n333  2023-11-30                361\n\n[334 rows x 2 columns]\n\n\n\n\n\n\n\n\n\nIndex([23, 23, 23, 23, 23, 23, 23, 23, 23, 23,\n       ...\n        0,  0,  0,  0,  0,  0,  0,  0,  0,  0],\n      dtype='int32', name='Departure', length=235544)"
  },
  {
    "objectID": "auteurs.html#auteurs",
    "href": "auteurs.html#auteurs",
    "title": "Contributeurs",
    "section": "",
    "text": "Email\nGitHub Profile\n\n\n\n\n\nEmail\nGitHub Profile\n\n\n\n\n\nEmail\nGitHub Profile\n\n\n\n\n\nEmail\nGitHub Profile"
  },
  {
    "objectID": "docu.html#structure-du-projet-will-be-finished-at-the-end",
    "href": "docu.html#structure-du-projet-will-be-finished-at-the-end",
    "title": "Documentation",
    "section": "2.1 Structure du projet [WILL BE FINISHED AT THE END]",
    "text": "2.1 Structure du projet [WILL BE FINISHED AT THE END]\nLa structure du projet est conçue pour garantir une séparation claire des composantes essentielles à l’analyse et à la création des visualisations. Voici un aperçu de l’organisation des fichiers et répertoires :\n\n\nVoir le structure\n\nmain/                                           # Répertoire principal du projet\n├── .github/workflows/                          # Configuration pour l'intégration continue\n├── analyse_donnee/                             # Scripts pour l'analyse des données\n├── cache/                                      # Fichiers temporaires\n├── data/                                       # Données des 3 jeux de données\n│   ├── extracted/                              # Données extraites\n│   ├── CoursesVelomagg.csv                     # Données des trajets VéloMagg\n│   ├── video.csv                               # Données vidéo brutes\n│   └── video_avec_coord.csv                    # Données vidéo enrichies avec coordonnées\n├── docs/                                       # Répertoire des fichiers du site web\n│   ├── .gitignore                              # Liste des fichiers à ignorer par Git\n│   ├──                                         # \n│   ├──                                         # \n│   ├──                                         # \n│   └── styles.css                              # Fichier CSS pour la mise en forme du site\n├── images/                                     # Images utilisées dans le projet\n├── map/                                        # Scripts pour les cartes interactives\n├── roadmap/                                    # Fichier README.md avec la description .......\n├── slide/                                      # \n├── src/                                        # Répertoire contenant le code source\n│   ├── __init__.py                             # Initialisation du package\n│   ├── donnée.py                               # Fonctions de traitement des données\n│   └── fonctions_basedonnees.py                # Fonctions pour les bases de données\n├── vidéo/                                      # \n├── visualisation/                              # Résultats des visualisations\n├──.DS_Store                                    # \n├──\n├──\n├── .Rhistory                                   # Fichier d'historique R\n├── .gitignore                                  # Fichier Git ignore\n├── README.md                                   # Documentation principale du projet\n└── requirements.txt                            # Dépendances du projet"
  },
  {
    "objectID": "docu.html#installation-et-dépendances",
    "href": "docu.html#installation-et-dépendances",
    "title": "Documentation",
    "section": "2.2 Installation et dépendances",
    "text": "2.2 Installation et dépendances\nAvant de commencer le développement et l’analyse des données, il est nécessaire de configurer l’environnement de travail en installant toutes les dépendances nécessaires. Voici les étapes à suivre pour préparer le projet :\n\nÉtapes de Préparation :\n\nCloner le Dépôt Git :\nTéléchargez le projet en exécutant :\ngit clone https://github.com/mscaia/PROJ_HAX712X.git\nInstaller les Dépendances :\nInstallez les bibliothèques nécessaires :\npip install -r requirements.txt\nPrévisualiser le Site Web :\nVérifiez l’environnement en lançant le serveur Quarto :\nquarto preview"
  },
  {
    "objectID": "docu.html#configuration-des-fichiers-sphinx---cheked",
    "href": "docu.html#configuration-des-fichiers-sphinx---cheked",
    "title": "Documentation",
    "section": "2.3 Configuration des fichiers [Sphinx - CHEKED]",
    "text": "2.3 Configuration des fichiers [Sphinx - CHEKED]\nLe projet est configuré de manière à utiliser Quarto pour la création du site web interactif et [Sphinx pour la documentation générée automatiquement]. Le fichier _quarto.yml contient les paramètres de configuration du projet Quarto, tandis que le fichier index.qmd contient le contenu principal de la page d’accueil du site."
  },
  {
    "objectID": "docu.html#base-de-données-et-traitement-des-données-should-be-recheked-after",
    "href": "docu.html#base-de-données-et-traitement-des-données-should-be-recheked-after",
    "title": "Documentation",
    "section": "2.4 Base de données et traitement des données [SHOULD BE RECHEKED AFTER]",
    "text": "2.4 Base de données et traitement des données [SHOULD BE RECHEKED AFTER]\nLes principaux jeux de données sont stockés dans le répertoire data/ et comprennent : - CoursesVelomagg.csv : Historique des trajets en vélos libres.\n- video.csv et video_avec_coord.csv : Données vidéo pour l’analyse spatiale.\nLes scripts situés dans src/ effectuent : - Le nettoyage des données.\n- La conversion des formats pour l’analyse."
  },
  {
    "objectID": "docu.html#exécution-du-projet",
    "href": "docu.html#exécution-du-projet",
    "title": "Documentation",
    "section": "2.5 Exécution du projet",
    "text": "2.5 Exécution du projet\nL’exécution du projet génère des visualisations interactives et des cartes prédictives grâce à : - Folium : Création de cartes interactives.\n- Matplotlib : Graphiques statistiques.\nLes résultats sont stockés dans visualisation/ et incluent des cartes des trajets et des prévisions de trafic."
  },
  {
    "objectID": "docu.html#documentation-et-tests-finish-and-rechecked",
    "href": "docu.html#documentation-et-tests-finish-and-rechecked",
    "title": "Documentation",
    "section": "2.6 Documentation et tests [FINISH AND RECHECKED]",
    "text": "2.6 Documentation et tests [FINISH AND RECHECKED]\nPour garantir la qualité du code, le projet intègre : - Tests Unitaires : Vérification des fonctionnalités principales.\n- Documentation Technique : Générée avec Sphinx et Quarto pour détailler les API, les méthodes et les résultats."
  },
  {
    "objectID": "docu.html#prétraitement-et-nettoyage-des-données",
    "href": "docu.html#prétraitement-et-nettoyage-des-données",
    "title": "Documentation",
    "section": "4.1 Prétraitement et Nettoyage des Données",
    "text": "4.1 Prétraitement et Nettoyage des Données\n\nÉtapes réalisées :\nLe nettoyage et le prétraitement des données ont constitué une étape fondamentale pour assurer la qualité et la cohérence des données utilisées dans l’analyse. Les principales actions entreprises sont les suivantes : - Validation des données : Identification et traitement des anomalies, telles que les valeurs aberrantes et les doublons, avec une gestion des valeurs manquantes en fonction de leur impact sur l’analyse. - Formatage temporel et géographique : Conversion des champs de dates pour permettre une analyse chronologique, et standardisation des adresses et coordonnées géographiques pour optimiser la géolocalisation.\nCette phase a permis de préparer des données propres et fiables, essentielles pour l’analyse et la création des visualisations."
  },
  {
    "objectID": "docu.html#visualisation-et-cartographie-du-trafic",
    "href": "docu.html#visualisation-et-cartographie-du-trafic",
    "title": "Documentation",
    "section": "4.2 Visualisation et Cartographie du Trafic",
    "text": "4.2 Visualisation et Cartographie du Trafic\n\nÉtapes réalisées :\nLes données traitées ont été intégrées dans des visualisations interactives et des cartes dynamiques pour illustrer le trafic cycliste à Montpellier. Les actions clés incluent : - Création de cartes interactives : Utilisation de la bibliothèque Folium pour développer une carte dynamique présentant les stations de vélos, les itinéraires fréquentés, et les zones de densité de trafic. - Calcul des itinéraires : Emploi de la bibliothèque OSMnx pour déterminer les itinéraires entre les stations, mettant en évidence les parcours les plus utilisés et permettant l’analyse des variations temporelles du trafic.\nCes visualisations ont été des outils essentiels pour la compréhension des tendances du trafic cycliste, facilitant l’analyse et la prise de décisions éclairées pour les phases suivantes du projet."
  },
  {
    "objectID": "docu.html#développement-de-linterface-web",
    "href": "docu.html#développement-de-linterface-web",
    "title": "Documentation",
    "section": "4.3 Développement de l’Interface Web",
    "text": "4.3 Développement de l’Interface Web\nLe projet s’est concrétisé par la création d’un site web interactif développé avec Quarto, intégrant : - Les visualisations interactives produites lors de l’analyse. - Une carte prédictive du trafic cycliste, permettant d’estimer les flux de vélos pour le lendemain en fonction des données historiques.\nCette interface a été conçue pour offrir une navigation fluide et intuitive, rendant les résultats accessibles aux utilisateurs de vélos. Elle constitue un outil complet pour l’analyse des données et la planification urbaine, tout en favorisant la promotion de la mobilité durable."
  },
  {
    "objectID": "docu.html#acquisition-des-données",
    "href": "docu.html#acquisition-des-données",
    "title": "Documentation",
    "section": "5.1 Acquisition des données",
    "text": "5.1 Acquisition des données\nLes ensembles de données ont été obtenus à partir de sources officielles :\n\nDonnées VéloMagg : Historique des trajets réalisés via le système de vélos en libre-service.\nComptages cyclistes et piétons : Données de comptage obtenues par des capteurs installés à des points stratégiques de la ville.\nDonnées OpenStreetMap (OSM) : Informations géographiques utilisées pour la cartographie des trajets.\n\nLes fichiers ont été extraits sous les formats .csv et .json et chargés à l’aide de la bibliothèque pandas. Une validation initiale a été réalisée pour vérifier l’intégrité des fichiers (taille, colonnes attendues, etc.)."
  },
  {
    "objectID": "docu.html#prétraitement",
    "href": "docu.html#prétraitement",
    "title": "Documentation",
    "section": "5.2 Prétraitement",
    "text": "5.2 Prétraitement\nL’étape de prétraitement vise à rendre les données prêtes pour l’analyse. Les principales opérations incluent :\n\nNettoyage des données : Suppression des valeurs manquantes et des doublons afin de garantir la cohérence des données.\nTransformation des variables : Normalisation des données temporelles pour assurer une harmonisation des différents jeux de données.\n\nCes étapes ont permis de préparer un jeu de données fiable pour l’analyse et la modélisation."
  },
  {
    "objectID": "docu.html#analyse-exploratoire",
    "href": "docu.html#analyse-exploratoire",
    "title": "Documentation",
    "section": "5.3 Analyse exploratoire",
    "text": "5.3 Analyse exploratoire\nUne analyse préliminaire des données a permis de dégager plusieurs tendances importantes :\n\nAnalyse temporelle des flux : Identification des variations du trafic cycliste selon l’heure, le jour et le mois.\nCartographie du trafic : Création de cartes interactives avec Folium pour visualiser les zones de forte densité de trafic.\nVisualisation des variations de trafic : Observation des fluctuations de la densité du trafic à travers la ville.\n\nCette analyse exploratoire a guidé les choix méthodologiques pour les étapes suivantes, notamment la modélisation du trafic."
  },
  {
    "objectID": "docu.html#modélisation",
    "href": "docu.html#modélisation",
    "title": "Documentation",
    "section": "5.4 Modélisation",
    "text": "5.4 Modélisation\nUn algorithme de prédiction du trafic cycliste a été conçu en prenant en compte plusieurs variables clés :\n\nDonnées historiques des trajets : Utilisation des trajets passés pour identifier des tendances.\nLocalisation et fréquence des trajets : Analyse des points de départ et d’arrivée, ainsi que des fréquences de passage.\n\nLe modèle repose sur l’analyse des données disponibles pour estimer les flux futurs de trafic, en se basant sur les tendances observées dans les trajets passés et leur répartition géographique."
  },
  {
    "objectID": "docu.html#visualisation",
    "href": "docu.html#visualisation",
    "title": "Documentation",
    "section": "5.5 Visualisation",
    "text": "5.5 Visualisation\nLes résultats du projet sont présentés à travers diverses visualisations interactives, permettant une exploration approfondie des données :\n\nCartes des trajets : Visualisation des trajets réalisés par les cyclistes, avec une mise en évidence des zones de forte densité de trafic.\nCartes prédictives : Représentation des trajectoires prévues pour le trafic cycliste basé sur les données historiques.\nCarte des stations de vélos de Montpellier : Localisation des stations de vélos en libre-service à travers la ville, permettant une meilleure compréhension des points d’accès aux vélos.\nVisualisation vidéo : Une vidéo illustrant l’évolution du trafic cycliste sur une journée complète, générée à partir des données du projet.\n\nToutes ces visualisations sont accessibles directement via le site web interactif du projet, offrant ainsi une interface intuitive pour l’exploration des flux cyclistes et des prédictions."
  },
  {
    "objectID": "docu.html#intégration",
    "href": "docu.html#intégration",
    "title": "Documentation",
    "section": "5.6 Intégration",
    "text": "5.6 Intégration\nLe pipeline a été conçu pour être flexible et évolutif afin de répondre aux besoins futurs du projet :\n\nPortabilité : Le système peut être facilement adapté à d’autres villes disposant de systèmes de vélos en libre-service similaires, permettant ainsi une application étendue de la méthodologie.\nScalabilité : Le pipeline est conçu pour intégrer de nouveaux types de données, tels que celles concernant la pollution de l’air ou les conditions météorologiques, pour affiner les prédictions et les analyses."
  },
  {
    "objectID": "docu.html#bibliothèques-utilisées",
    "href": "docu.html#bibliothèques-utilisées",
    "title": "Documentation",
    "section": "6.1 Bibliothèques utilisées",
    "text": "6.1 Bibliothèques utilisées\nDans le cadre de ce projet, plusieurs bibliothèques ont été utilisées pour répondre aux différents besoins techniques et analytiques. Voici une présentation des bibliothèques principales et leur rôle.\n\n\ncsv\n\nLa bibliothèque csv permet de lire et d’écrire des fichiers CSV, un format commun pour manipuler des données tabulaires.\nNous avons utilisé csv pour extraire et traiter les données brutes contenues dans des fichiers au format CSV. Cela est particulièrement utile pour manipuler des ensembles de données simples où une lecture ligne par ligne est nécessaire.\n\n\n\nmatplotlib.pyplot\n\nmatplotlib.pyplot est utilisée pour produire des graphiques statiques et des visualisations animées.\nDans ce projet, elle permet de créer des graphiques dynamiques illustrant les trajectoires cyclistes et d’exporter ces visualisations sous forme de vidéos à l’aide des modules FuncAnimation et FFMpegWriter.\n\n\n\nmatplotlib.animation.FuncAnimation et FFMpegWriter\n\nCes modules de la bibliothèque matplotlib.animation permettent de créer des animations et d’exporter celles-ci sous forme de fichiers vidéo.\nDans le projet, ils sont utilisés pour générer des animations illustrant les variations temporelles du trafic cycliste et les enregistrer sous un format visuel accessible.\n\n\n\nnumpy\n\nnumpy est une bibliothèque puissante pour effectuer des calculs numériques avancés, notamment des opérations matricielles.\nLes opérations matricielles et les calculs numériques complexes nécessaires à l’analyse des données sont simplifiés grâce à numpy, qui garantit également des performances élevées.\n\n\n\nos\n\nos fournit des fonctions pour interagir avec le système d’exploitation, notamment pour gérer les fichiers et les répertoires.\nNous avons utilisé os pour gérer les chemins des fichiers, vérifier l’existence des répertoires, et manipuler les ressources locales du système.\n\n\n\npooch\n\npooch facilite le téléchargement et la mise en cache des fichiers nécessaires à l’exécution du projet.\nCette bibliothèque permet de garantir un accès fiable aux données externes en les téléchargeant automatiquement et en les stockant localement pour une réutilisation future.\n\n\n\npandas\n\npandas est essentielle pour manipuler et analyser des données tabulaires de manière efficace.\npandas est utilisée pour nettoyer, transformer et analyser des ensembles de données complexes, offrant des fonctionnalités avancées comme le traitement des séries temporelles et des jointures de tables.\n\n\n\njson\n\njson est utilisée pour manipuler des données au format JSON, un standard de stockage et d’échange d’informations structurées.\nNous utilisons json pour lire et écrire des données structurées, notamment pour gérer les configurations et les résultats intermédiaires dans des fichiers légers.\n\n\n\nre\n\nLa bibliothèque re permet de travailler avec des expressions régulières pour manipuler des chaînes de caractères.\nGrâce à re, nous avons pu extraire des informations spécifiques des chaînes de caractères et nettoyer les données textuelles de manière efficace.\n\n\n\nunicodedata\n\nunicodedata est utilisée pour normaliser les chaînes de caractères Unicode.\nCette bibliothèque est essentielle pour traiter les caractères spéciaux et garantir la cohérence des chaînes de caractères provenant de différentes sources.\n\n\n\nfolium\n\nfolium est une bibliothèque dédiée à la création de cartes interactives.\nNous avons utilisé folium pour visualiser les trajets et itinéraires des vélos sur des cartes interactives, permettant une meilleure compréhension géographique des données.\n\n\n\nosmnx\n\nosmnx est utilisée pour le géocodage et l’analyse des réseaux géographiques.\nCette bibliothèque permet d’extraire des données géographiques d’OpenStreetMap, de construire des graphes routiers, et d’analyser les itinéraires et les trajets cyclistes dans le cadre de ce projet.\n\n\n\nfunctools.lru_cache\n\nfunctools.lru_cache est une fonctionnalité de Python pour optimiser les performances.\nEn mettant en cache les résultats des fonctions fréquemment appelées, functools.lru_cache améliore les performances et réduit le temps de calcul pour des opérations répétées.\n\n\n\nnetworkx\n\nnetworkx est une bibliothèque dédiée à la création, la manipulation et l’analyse de graphes complexes.\nDans ce projet, elle est utilisée pour représenter et étudier les réseaux cyclistes, notamment pour visualiser les trajets et calculer les chemins les plus courts entre les nœuds.\n\n\n\nconcurrent.futures.ThreadPoolExecutor\n\nThreadPoolExecutor est une fonctionnalité du module standard concurrent.futures pour exécuter des tâches en parallèle.\nElle est utilisée pour optimiser le traitement des données et accélérer le rendu des animations dans le cadre de ce projet.\n\n\n\ndatetime\n\ndatetime est un module intégré pour manipuler les dates et les heures.\nDans le projet, il est employé pour traiter les données temporelles des trajets cyclistes et synchroniser les animations avec les horodatages."
  },
  {
    "objectID": "docu.html#functions-utilisées",
    "href": "docu.html#functions-utilisées",
    "title": "Documentation",
    "section": "6.2 Functions utilisées",
    "text": "6.2 Functions utilisées\n\n6.2.1 Map\n\nFonctions de traitement des données\n\n\ncolonne(i, w_file)\n\nDescription:\nCette fonction permet d’extraire une colonne spécifique d’un fichier CSV. Elle prend en entrée un indice i, représentant la colonne à extraire, ainsi que le chemin du fichier w_file. La fonction ouvre le fichier, parcourt chaque ligne et récupère l’élément situé à la position i dans chaque ligne.\nParamètres:\n- i (int) : L’indice de la colonne à extraire.\n- w_file (str) : Le chemin d’accès au fichier CSV.\nRetourne:\n- L (list) : Une liste contenant les valeurs de la colonne spécifiée.\nCode de la fonction:\ndef colonne(i, w_file):\n    L = []\n    with open(w_file) as f:\n        for line in f:\n            x = line.split(\",\")\n            L.append(x[i])\n    return L\nExemple d’utilisation:\nSupposons un fichier data.csv contenant :\nname,age,city\nAlice,30,Paris\nBob,25,Lyon\nAppeler colonne(1, \"data.csv\") retourne [30, 25].\n[PUT ILLUSTRATION OF FUNCTION HERE]\n\n\n\narg(k, i, j, w_file)\n\nDescription:\nCette fonction extrait les données correspondant à une clé k dans un fichier CSV et retourne les valeurs des colonnes spécifiées par i et j.\nParamètres:\n- k (str) : La clé utilisée pour filtrer les données.\n- i (int) : L’indice de la colonne contenant les clés.\n- j (int) : L’indice de la colonne à retourner.\n- w_file (str) : Le chemin d’accès au fichier CSV.\nRetourne:\n- L (list) : Une liste contenant les valeurs correspondantes.\nCode de la fonction:\ndef arg(k, i, j, w_file):\n    L = []\n    with open(w_file) as f:\n        for line in f:\n            x = line.split(\",\")\n            if x[i] == k:\n                L.append(x[j])\n    return L\nExemple d’utilisation:\nPour le fichier data.csv ci-dessus, appeler arg(\"Alice\", 0, 2, \"data.csv\") retourne [Paris].\n\n\n\nFonctions d’adresse et de géocodage\n\n\nnettoyer_adresse_normalise(adresse)\n\nDescription:\nNettoie et normalise une adresse en supprimant les caractères spéciaux, doublons, et autres anomalies.\nParamètres:\n- adresse (str) : L’adresse à normaliser.\nRetourne:\n- adresse (str) : L’adresse nettoyée et normalisée.\nCode de la fonction:\ndef nettoyer_adresse_normalise(adresse):\n    \"\"\"\n    Nettoie et normalise une adresse en supprimant les numéros au début, \n    en normalisant les caractères Unicode.\n    \n    Paramètre :\n    adresse (str) : La chaîne d'adresse à normaliser.\n    \n    Retourne :\n    str : L'adresse nettoyée et normalisée.\n    \"\"\"\n    # Tenter de corriger l'encodage si nécessaire\n    try:\n        # Encode la chaîne en latin1 puis décode en utf-8\n        adresse = adresse.encode('latin1').decode('utf-8')\n    except (UnicodeEncodeError, UnicodeDecodeError):\n        pass  # Ignore les erreurs d'encodage si elles se produisent\n\n    # Supprimer les numéros ou autres formats non pertinents (ex: 057 au début)\n    adresse = re.sub(r'^\\d+\\s*', '', adresse)  # Enlève les numéros au début\n    \n    # Normalisation des caractères Unicode\n    adresse = unicodedata.normalize('NFKD', adresse)\n    \n    # Retourner l'adresse nettoyée et normalisée\n    return adresse  # Enlever les espaces supplémentaires aux extrémités\nExemple avant/après:\n- Avant : \"  12, Rue de la République  \"\n- Après : \"12 rue de la république\"\n[PUT ILLUSTRATION OF CLEANED ADDRESS HERE]\n\n\n\ncoordonne(station)\n\nDescription :\nCette fonction permet de géocoder le nom d’une station pour obtenir ses coordonnées géographiques (latitude et longitude). Elle utilise la bibliothèque osmnx pour rechercher l’emplacement correspondant à la station spécifiée dans la ville de Montpellier, France.\nParamètres :\n\n\nstation (str) : Le nom de la station à géocoder.\n\n\nRetourne :\n\n\nlatitude (float) : La latitude de la station.\n\n\nlongitude (float) : La longitude de la station.\n\n\nCode de la fonction :\n  def coordonne(station):\n    try:\n        # Recherche de l'emplacement en utilisant osmnx\n        location = ox.geocode(f\"{station}, Montpellier, France\")\n        return location[0], location[1]\n    except Exception as e:\n        print(f\"Erreur pour la station {station}: {e}\")\n        return None, None\n\n\n\nFonctions liées à la carte\n\n\ngen_carte_trajet(ligne, G, m, index_colonne_départ, index_colonne_arrive, couleur)\n\nDescription:\nGénère une carte interactive pour visualiser un trajet spécifique sur un graphe G en utilisant une bibliothèque de cartographie.\nParamètres:\n\n\n\nligne (list) : Une ligne contenant les noms des stations de départ et d’arrivée.\n\n\nG (Graph) : Le graphe représentant le réseau de rues de la ville.\n\n\nm (Map) : L’objet de la carte sur lequel le trajet sera tracé.\n\n\nindex_colonne_départ (int) : L’indice de la colonne contenant le nom de la station de départ.\n\n\nindex_colonne_arrive (int) : L’indice de la colonne contenant le nom de la station d’arrivée.\n\n\ncouleur (str) : La couleur de la ligne représentant le trajet.\n\n\nRetourne:\n- map (Map) : Une carte avec le trajet ajouté.\nCode de la fonction:\ndef gen_carte_trajet(ligne, G, m, index_colonne_départ, index_colonne_arrive,couleur):\n    # Essayer de géocoder les stations de départ et d'arrivée\n    try:\n        origin = ox.geocode(f\"{ligne[index_colonne_départ]}, Montpellier, France\")  # Première colonne\n        destination = ox.geocode(f\"{ligne[index_colonne_arrive]}, Montpellier, France\")  # Deuxième colonne\n        \n        # Vérifier si le géocodage a réussi\n        if origin is None or destination is None:\n            print(f\"Erreur de géocodage pour les stations : {ligne[index_colonne_départ]} ou {ligne[index_colonne_arrive]}\")\n            return m\n        \n        # Trouver les nœuds les plus proches de l'origine et de la destination\n        origin_node = ox.nearest_nodes(G, origin[1], origin[0])  # longitude, latitude\n        destination_node = ox.nearest_nodes(G, destination[1], destination[0])  # longitude, latitude\n\n        # Calculer l'itinéraire aller et retour\n        route = ox.shortest_path(G, origin_node, destination_node)\n\n        # Fonction pour convertir un itinéraire (liste de nœuds) en liste de coordonnées géographiques\n        def route_to_coords(G, route):\n            route_coords = []\n            for node in route:\n                point = (G.nodes[node]['y'], G.nodes[node]['x'])  # latitude, longitude\n                route_coords.append(point)\n            return route_coords\n\n        # Obtenir les coordonnées pour l'itinéraire\n        route_coords = route_to_coords(G, route)\n\n        # Ajouter l'itinéraire aller (en rouge) à la carte\n        folium.PolyLine(locations=route_coords, color=couleur, weight=5, opacity=0.75).add_to(m)\n\n        # Ajouter des marqueurs pour l'origine et la destination\n        départ_lat, départ_lon = route_coords[0]\n        arr_lat, arr_lon = route_coords[-1]  # Utiliser le dernier point pour l'arrivée\n        folium.Marker(location=[départ_lat, départ_lon], popup=f\"{ligne[index_colonne_départ]},Départ\").add_to(m)\n        folium.Marker(location=[arr_lat, arr_lon], popup=f\"{ligne[index_colonne_arrive]},arrivé\").add_to(m)\n\n    except Exception as e:\n        print(f\"Une erreur est survenue : {e}\")\n    \n    return m\n[PUT ILLUSTRATION OF TRAJECTORY MAP HERE]\n\n\n\nFonctions utilitaires\n\n\npd_to_datetime(df, colonne_date)\n\nDescription:\nConvertit une colonne d’un DataFrame Pandas en type datetime. Supprime les valeurs non valides.\nParamètres:\n- df (DataFrame) : DataFrame Pandas.\n- colonne_date (str) : Nom de la colonne à convertir.\nRetourne:\n- df (DataFrame) : DataFrame avec la colonne convertie.\nCode de la fonction :\n  def pd_to_datetime(df, colonne_date):\n    df = df.dropna()\n    df[colonne_date] = pd.to_datetime(df[colonne_date])\n    df['Date'] = df[colonne_date].dt.date\n    df = df.drop(columns=[colonne_date])\n    return df\n\n\n\n\n6.2.2 Préduction [DOCUM FROM CA - PUT HERE]\n\n\n6.2.3 Video\n\n\nchemin_court(row)\n\nDescription:\nCalcule le chemin le plus court entre deux stations à l’aide du graphe routier de Montpellier, basé sur leurs coordonnées géographiques.\nParamètres:\n- row (pandas.Series) : Une ligne du DataFrame contenant les coordonnées des stations de départ et d’arrivée.\nRetourne:\n- chemin (list) : Une liste d’identifiants de nœuds représentant le chemin.\n- duration (float) : La durée du trajet en secondes.\nCode de la fonction:\ndef chemin_court(row):\n    try:\n        depart_lat, depart_lon = row['latitude_depart'], row['longitude_depart']\n        arrivee_lat, arrivee_lon = row['latitude_retour'], row['longitude_retour']\n        duration = row['Duration (sec.)']\n        \n        noeud_deb = ox.distance.nearest_nodes(G, depart_lon, depart_lat)\n        noeud_fin = ox.distance.nearest_nodes(G, arrivee_lon, arrivee_lat)\n        \n        chemin = nx.shortest_path(G, noeud_deb, noeud_fin, weight=\"length\")\n        return chemin, duration\n    except Exception as e:\n        print(f\"Erreur pour le trajet entre {row['Departure station']} et {row['Return station']}: {e}\")\n        return None, None\nExemple d’utilisation:\nPour une ligne contenant les colonnes latitude_depart, longitude_depart, etc., cette fonction renvoie le chemin le plus court entre deux points.\n[PUT ILLUSTRATION OF GRAPH ROUTE HERE]\n\n\n\ninit()\n\nDescription:\nInitialise les points de départ pour chaque trajet dans la visualisation.\nRetourne:\n- points (list) : Une liste d’objets matplotlib représentant les points animés.\nCode de la fonction:\ndef init():\n    for point in points:\n        point.set_data([], [])\n    time_text.set_text('')\n    return points + [time_text]\n[PUT ILLUSTRATION OF INITIALIZATION STEP HERE]\n\n\n\nupdate(frame)\n\nDescription:\nMet à jour les positions des points dans l’animation en fonction de la progression du chemin pour chaque trajet.\nParamètres:\n- frame (int) : L’indice actuel de la frame dans l’animation.\nRetourne:\n- points (list) : Les points mis à jour pour la frame actuelle.\nCode de la fonction:\ndef update(frame):\n    # Calculer l'heure actuelle\n    current_time = start_time + datetime.timedelta(seconds=frame * frame_duration)\n    time_text.set_text(current_time.strftime('%Y-%m-%d %H:%M:%S'))\n\n    for i, path in enumerate(paths):\n        progress = min(frame / total_frames, 1)  # Progression en fonction de total_frames\n        num_nodes = int(progress * len(path))\n\n        if num_nodes &gt; 0:\n            current_node = path[num_nodes - 1]\n            x, y = G.nodes[current_node]['x'], G.nodes[current_node]['y']\n            points[i].set_data([x], [y])\n\n    return points + [time_text]\nExemple d’utilisation:\nChaque frame de l’animation appelle cette fonction pour mettre à jour les points. La progression est calculée en fonction de frame et du nombre total de frames."
  },
  {
    "objectID": "docu.html#class",
    "href": "docu.html#class",
    "title": "Documentation",
    "section": "6.3 Class",
    "text": "6.3 Class\n[HERE IS A TEXT ABOUT CLASS]"
  }
]