[
  {
    "objectID": "projet3.html",
    "href": "projet3.html",
    "title": "Projet 3",
    "section": "",
    "text": "Et là, la vidéo que nous avons produit."
  },
  {
    "objectID": "projet1.html",
    "href": "projet1.html",
    "title": "Projet 1",
    "section": "",
    "text": "Ci-dessous, quelques éléments d’analyse des données.\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport plotly.express as px\nimport calendar\nimport kaleido\nimport numpy as np\n\n\nfor i in range(5):\n    if i==0 :\n        chemin =\"C:/Users/Fabian/HAX712X/PROJ_HAX712X/data/CoursesVelomagg.csv\"\n        annee = 2024\n    if i==1 :\n        chemin =\"C:/Users/Fabian/HAX712X/PROJ_HAX712X/data/extracted/TAM_MMM_CoursesVelomagg_2021.csv\"\n        annee = 2021\n    if i==2 :\n        chemin =\"C:/Users/Fabian/HAX712X/PROJ_HAX712X/data/extracted/TAM_MMM_CoursesVelomagg_2022.csv\"\n        annee = 2022\n    if i==3 :\n        chemin =\"C:/Users/Fabian/HAX712X/PROJ_HAX712X/data/extracted/TAM_MMM_CoursesVelomagg_2023.csv\"\n        annee = 2023\n    # Traitement du dataframe\n    #Extraire notre dataframe\n    df_coursesvelomagg = pd.read_csv(chemin)\n    if i==1:\n        df_coursesvelomagg = pd.read_csv(chemin, delimiter=';')\n    df_coursesvelomagg_traité = df_coursesvelomagg\n    # Convertir la colonne 'Departure' en datetime\n    df_coursesvelomagg_traité['Departure'] = pd.to_datetime(df_coursesvelomagg_traité['Departure'])\n    # Extraire les dates de départ\n    df_coursesvelomagg_traité['Date'] = df_coursesvelomagg_traité['Departure'].dt.date\n    df_bikes = df_coursesvelomagg_traité\n\n    # Statistique sur le nombre de trajet effectué par jour\n    # Compter le nombre de trajets par jour pour les départs\n    trajets_depart = df_coursesvelomagg_traité.groupby('Date').size().reset_index(name='Nombre de trajets')\n    # Remplir les NaN par 0 pour les dates sans trajets\n    trajets_depart.fillna(0, inplace=True)\n    # Afficher le résultat\n    print(\"Nombre de trajets par jour:\")\n    print(trajets_depart)\n    # Visualisation sous forme de diagramme à barres\n    plt.figure(figsize=(12, 6))\n    plt.bar(trajets_depart['Date'], trajets_depart['Nombre de trajets'], color='b', alpha=0.7)\n    plt.title(f\"Nombre total de trajets par jour pour {annee}\")\n    plt.xlabel('Date')\n    plt.ylabel('Nombre total de trajets')\n    plt.xticks(rotation=45)  # Rotation des étiquettes sur l'axe des x pour une meilleure lisibilité\n    plt.grid(axis='y')  # Ajouter une grille horizontale pour une meilleure lisibilité\n    plt.tight_layout()  # Pour ajuster les marges\n    plt.savefig(f\"./images/Nbr_trajet_par_jour_{annee}\")\n    plt.show()\n\n\n\n    # Traitement donnée pour avoir un graphique avec les jours,heures et le nombre de vélo\n\n    df_bikes = df_coursesvelomagg_traité.set_index('Departure')\n    df_bikes[\"weekday\"] = df_bikes.index.dayofweek  # Monday=0, Sunday=6\n    print(df_bikes.index.hour)\n\n    # Regroupement par jour de la semaine et heure\n    df_polar = (\n        df_bikes.groupby([\"weekday\", df_bikes.index.hour])[\"Covered distance (m)\"]\n        .count()\n        .reset_index(name='Count')  # Renommer la colonne résultante\n    )\n\n    # Modification de la colonne \"weekday\" pour obtenir les abréviations\n    df_polar[\"weekday\"] = df_polar[\"weekday\"].apply(lambda x: calendar.day_abbr[x])\n\n    # Définition des couleurs\n    n_colors = 8  # Nombre de couleurs\n    colors = px.colors.sample_colorscale(\n        \"mrybm\", [n / (n_colors - 1) for n in range(n_colors)]\n    )\n\n    # Conversion des heures en degrés (0 à 360 degrés)\n    df_polar['heure'] = df_polar['Departure'] * 15  # Chaque heure = 15 degrés\n\n    # Création de la figure\n    fig = px.line_polar(\n        df_polar,\n        r=\"Count\",  # Utilisez le nombre de trajets comme rayon\n        theta=\"heure\",  # Utilisez l'heure comme angle\n        color=\"weekday\",\n        line_close=True,\n        range_r=[0, df_polar[\"Count\"].max() + 50],\n        start_angle=0,\n        color_discrete_sequence=colors,\n        template=\"seaborn\",\n        title=f\"Trajet journalier {annee}\",\n    )\n    fig.update_layout(polar=dict(angularaxis=dict(tickvals=list(range(0, 360, 15)), ticktext=[f\"{i}:00\" for i in range(24)])))\n    # Sauvegarde de la figure\n    fig.write_html(f\"C:/Users/Fabian/HAX712X/PROJ_HAX712X/images/graphique_distance_jour_{annee}.html\")\n    fig.show()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLe graphique ci-dessus montre […]"
  },
  {
    "objectID": "docu.html",
    "href": "docu.html",
    "title": "Documentation",
    "section": "",
    "text": "This project explores and visualizes bike traffic in Montpellier by analyzing data from multiple sources and generating interactive maps. The goal is to provide valuable insights into the city’s bike traffic patterns, which will support urban mobility planning and decision-making."
  },
  {
    "objectID": "docu.html#data-cleaning-and-preprocessing",
    "href": "docu.html#data-cleaning-and-preprocessing",
    "title": "Documentation",
    "section": "4.1 Data Cleaning and Preprocessing",
    "text": "4.1 Data Cleaning and Preprocessing\n\nTasks:\n\nData Integrity: Clean the data by removing anomalies, handling missing values, and ensuring consistent formatting.\nDate and Address Formatting: Convert date fields for temporal analysis and standardize address formatting to enable efficient location-based processing."
  },
  {
    "objectID": "docu.html#traffic-visualization-and-mapping",
    "href": "docu.html#traffic-visualization-and-mapping",
    "title": "Documentation",
    "section": "4.2 Traffic Visualization and Mapping",
    "text": "4.2 Traffic Visualization and Mapping\n\nTasks:\n\nMap Generation: Use the Folium library to generate an interactive map of Montpellier, displaying bike stations, routes, and traffic density.\nRoute Calculation: Utilize OSMnx to calculate the routes between bike stations, highlighting the most popular paths and enabling traffic analysis over time."
  },
  {
    "objectID": "docu.html#website-development",
    "href": "docu.html#website-development",
    "title": "Documentation",
    "section": "4.3 Website Development",
    "text": "4.3 Website Development\nThe final deliverable will be an interactive website, presenting all the data visualizations and analytical insights. The website will be developed using Quarto for easy integration of analysis and visualizations into an accessible, interactive interface."
  },
  {
    "objectID": "docu.html#additional-features",
    "href": "docu.html#additional-features",
    "title": "Documentation",
    "section": "6.1 Additional Features",
    "text": "6.1 Additional Features\n\nPollution and Traffic Correlation: Investigate correlations between bike traffic patterns and air quality metrics.\nReal-Time Traffic Analysis: Integrate live data feeds for real-time updates, route suggestions, and traffic monitoring.\nAlternative Routes: Offer optimized routes with lower traffic density, based on real-time or historical traffic data."
  },
  {
    "objectID": "auteurs.html",
    "href": "auteurs.html",
    "title": "Contributeurs",
    "section": "",
    "text": "Email\nGitHub Profile\n\n\n\n\n\nEmail\nGitHub Profile\n\n\n\n\n\nEmail\nGitHub Profile\n\n\n\n\n\nEmail\nGitHub Profile"
  },
  {
    "objectID": "auteurs.html#auteurs",
    "href": "auteurs.html#auteurs",
    "title": "Contributeurs",
    "section": "",
    "text": "Email\nGitHub Profile\n\n\n\n\n\nEmail\nGitHub Profile\n\n\n\n\n\nEmail\nGitHub Profile\n\n\n\n\n\nEmail\nGitHub Profile"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Visualisation des trajets en vélo dans la ville de Montpellier.",
    "section": "",
    "text": "CycleVision3 est un projet qui vise à décrire le trafic cycliste à Montpellier à travers l’analyse des quelques jeux de données suivants :\n\nTrajets à vélos en libre-service\nComptages vélo et piéton issus des compteurs de vélo\nOpenStreetMap\n\nIl s’agit principalement d’un projet de visualisation, avec des cartes (dont certaines sont interactives) et une vidéo. Les principaux projets sont disponibles dans l’onglet éponyme."
  },
  {
    "objectID": "index.html#a-propos",
    "href": "index.html#a-propos",
    "title": "Visualisation des trajets en vélo dans la ville de Montpellier.",
    "section": "",
    "text": "CycleVision3 est un projet qui vise à décrire le trafic cycliste à Montpellier à travers l’analyse des quelques jeux de données suivants :\n\nTrajets à vélos en libre-service\nComptages vélo et piéton issus des compteurs de vélo\nOpenStreetMap\n\nIl s’agit principalement d’un projet de visualisation, avec des cartes (dont certaines sont interactives) et une vidéo. Les principaux projets sont disponibles dans l’onglet éponyme."
  },
  {
    "objectID": "index.html#stations-de-vélos-à-montpellier.",
    "href": "index.html#stations-de-vélos-à-montpellier.",
    "title": "Visualisation des trajets en vélo dans la ville de Montpellier.",
    "section": "Stations de vélos à Montpellier.",
    "text": "Stations de vélos à Montpellier."
  },
  {
    "objectID": "index.html#test-importation-fichier-python",
    "href": "index.html#test-importation-fichier-python",
    "title": "Visualisation des trajets en vélo dans la ville de Montpellier.",
    "section": "Test Importation fichier Python",
    "text": "Test Importation fichier Python\n\n\nNombre de trajets par jour:\n           Date  Nombre de trajets\n0    2023-12-01                241\n1    2023-12-02                331\n2    2023-12-03                262\n3    2023-12-04                175\n4    2023-12-05                272\n..          ...                ...\n241  2024-09-26                609\n242  2024-09-27                682\n243  2024-09-28                679\n244  2024-09-29                742\n245  2024-09-30                567\n\n[246 rows x 2 columns]\n\n\n\n\n\n\n\n\n\nInt64Index([23, 23, 23, 23, 23, 23, 23, 22, 22, 22,\n            ...\n             0,  0,  0,  0,  0,  0,  0,  0,  0,  0],\n           dtype='int64', name='Departure', length=126786)"
  },
  {
    "objectID": "index.html#contact",
    "href": "index.html#contact",
    "title": "Visualisation des trajets en vélo dans la ville de Montpellier.",
    "section": "Contact",
    "text": "Contact\nPour toute question ou suggestion, n’hésitez pas à nous contacter."
  },
  {
    "objectID": "projet2.html",
    "href": "projet2.html",
    "title": "Projet 2",
    "section": "",
    "text": "Ici, les cartes issues de nos principaux travaux.\n\nimport osmnx as ox\nimport folium\nimport pandas as pd\nimport ipywidgets as widgets\nfrom IPython.display import display, clear_output\nfrom src.fonctions_basedonnees import *\n\n# Effacer le cache\ncoordonne.cache_clear()\n\n# Configuration initiale\nville = \"Montpellier, France\"\nG = ox.graph_from_place(ville, network_type=\"all\")\nm = folium.Map(location=[43.6114, 3.8767], zoom_start=13)\n\n# Charger le DataFrame\ndf_coursesvelomagg_traité = pd.read_csv(\"../data/CoursesVelomagg.csv\").dropna()\nliste_des_trajets = df_coursesvelomagg_traité[['Departure', 'Departure station', 'Return station', 'Covered distance (m)', 'Duration (sec.)']]\n\n# Nettoyer et normaliser les colonnes\nliste_des_trajet_DBF = liste_des_trajets.copy()\nliste_des_trajet_DBF['Departure station'] = liste_des_trajet_DBF['Departure station'].apply(nettoyer_adresse_normalise)\nliste_des_trajet_DBF['Return station'] = liste_des_trajet_DBF['Return station'].apply(nettoyer_adresse_normalise)\n\n# Remplacements spécifiques\nliste_des_trajet_DBF['Departure station'] = liste_des_trajet_DBF['Departure station'].replace(\"FacdesSciences\", \"Faculté des sciences\")\nliste_des_trajet_DBF['Return station'] = liste_des_trajet_DBF['Return station'].replace(\"FacdesSciences\", \"Faculté des sciences\")\nliste_des_trajet_DBF['Departure station'] = liste_des_trajet_DBF['Departure station'].replace(r\".*Gare Saint-Roch$\", \"Gare Saint-Roch\", regex=True)\nliste_des_trajet_DBF['Return station'] = liste_des_trajet_DBF['Return station'].replace(r\".*Gare Saint-Roch$\", \"Gare Saint-Roch\", regex=True)\n\n# Liste des dates disponibles\nListe_des_dates = liste_des_trajet_DBF['Departure'].str[:10].unique()\n\n# Widgets interactifs\ndate_selector = widgets.Dropdown(\n    options=Liste_des_dates,\n    description=\"Date:\",\n    style={'description_width': 'initial'}\n)\n\ntrajet_toggle = widgets.Checkbox(\n    value=False,\n    description=\"Tracer les trajets ?\",\n    style={'description_width': 'initial'}\n)\n\ntrajet_slider = widgets.IntSlider(\n    value=1,\n    min=1,\n    max=10,\n    step=1,\n    description=\"Nombre de trajets:\",\n    style={'description_width': 'initial'}\n)\n\nbutton_display = widgets.Button(description=\"Afficher la carte\")\n\noutput = widgets.Output()\n\ndef update_map(change):\n    with output:\n        clear_output()\n        selected_date = date_selector.value\n        tracer = trajet_toggle.value\n        nb_trajets = trajet_slider.value\n\n        trajets_du_jour = liste_des_trajet_DBF[liste_des_trajet_DBF['Departure'].str.startswith(selected_date)]\n        trajets_du_jour = trajets_du_jour.reset_index(drop=True)\n\n        nb_ref = len(trajets_du_jour)\n        print(f\"Nous avons {nb_ref} référence(s) pour la date {selected_date}.\")\n        \n        if tracer:\n            print(f\"Traçage des {min(nb_trajets, nb_ref)} trajets:\")\n            for i in range(min(nb_trajets, nb_ref)):\n                trajet = trajets_du_jour.iloc[i]\n                if trajet['Covered distance (m)'] &lt; 2000:\n                    gen_carte_trajet(trajet, G, m, 1, 2, 'green')\n                elif 2000 &lt; trajet['Covered distance (m)'] &lt; 4000:\n                    gen_carte_trajet(trajet, G, m, 1, 2, 'blue')\n                else:\n                    gen_carte_trajet(trajet, G, m, 1, 2, 'red')\n            \n            # Légende\n            legend_html = \"\"\"\n            &lt;div style=\"\n                position: fixed;\n                bottom: 50px;\n                left: 50px;\n                width: 200px;\n                height: 120px;\n                background-color: white;\n                border:2px solid grey;\n                z-index:9999;\n                font-size:14px;\n                padding: 10px;\n                \"&gt;\n                &lt;b&gt;Légende des distances&lt;/b&gt; &lt;br&gt;\n                &lt;i style=\"background:green; width: 10px; height: 10px; float: left; margin-right: 10px;\"&gt;&lt;/i&gt; Moins de 2000 m&lt;br&gt;\n                &lt;i style=\"background:blue; width: 10px; height: 10px; float: left; margin-right: 10px;\"&gt;&lt;/i&gt; Entre 2000 et 4000 m&lt;br&gt;\n                &lt;i style=\"background:red; width: 10px; height: 10px; float: left; margin-right: 10px;\"&gt;&lt;/i&gt; Plus de 4000 m&lt;br&gt;\n            &lt;/div&gt;\n            \"\"\"\n            m.get_root().html.add_child(folium.Element(legend_html))\n            m.save(\"../visualisation/carte_montpellier_trajet_via_BD.html\")\n            print(\"Carte sauvegardée dans '../visualisation/carte_montpellier_trajet_via_BD.html'.\")\n        else:\n            print(\"Traçage non activé.\")\n\nbutton_display.on_click(update_map)\n\n# Affichage des widgets\ndisplay(date_selector, trajet_toggle, trajet_slider, button_display, output)"
  }
]